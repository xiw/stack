#!/usr/bin/env python

import os
import subprocess
import sys

def cc(llvmcc, src, argv):
	out = [i for i, x in enumerate(argv) if x == '-o']
	if not out:
		out = src
	else:
		out = argv[out[-1] + 1]
		# Why hiding .o?
		if out.startswith('/tmp/') or out.startswith('/var/tmp/'):
			out = src
	if out != '-':
		out = os.path.splitext(out)[0] + '.%d.ll' % os.getpid()
	argv += ['-o', '-']
	# Remove profiling flags.
	argv = [x for x in argv if x not in ['-pg', '-fprofile-arcs', '-ftest-coverage']]
	# Removing debug flags.
	argv = [x for x in argv if x not in ['-ggdb', '-gstabs']]
	# Remove warning flags.
	argv = [x for x in argv if not x.startswith('-W')]
	# Linux kernel hack: disable asm goto.
	argv = [x for x in argv if x != '-DCC_HAVE_ASM_GOTO']
	# Remove std flags (error in C++).
	argv = [x for x in argv if x not in ['-std=gnu99']]
	# Use -fstrict-overflow to distinguish signed/unsigned integers.
	argv = [x for x in argv if x not in ['-fwrapv', '-fno-strict-overflow']]
	# Remove runtime undefined error checking options
	argv = [x for x in argv if x not in ['-ftrapv', '-fcatch-undefined-errors']]
	# Remove other runtime error checking options
	argv = [x for x in argv if not x.startswith('-fsanitize=') and not in ['-faddress-sanitizer', '-fthread-sanitizer']]
	# Drop existing _FORTIFY_SOURCE.
	argv = [x for x in argv if not x.startswith('-D_FORTIFY_SOURCE')]
	# Additional options.
	more = ['-Qunused-arguments', '-w', '-S', '-flto', '-O0', '-g', '-D_FORTIFY_SOURCE=0']
	# Frontend plugin.
	intfe = os.path.join(os.path.dirname(__file__), '..', '..', 'lib', 'liboptfe.so')
	plugin = ['-Xclang', '-load', '-Xclang', intfe, '-Xclang', '-plugin', '-Xclang', 'intfe']
	p1 = subprocess.Popen(llvmcc + argv + more + plugin + [src], stdout=subprocess.PIPE)
	# Don't invoke -early-cse, which may hide undefined behavior bugs.
	# Don't invoke -simplifycfg, which may combine basic blocks.
	opts = ['-strip-debug-declare', '-scalarrepl', '-lower-expect']
	p2 = subprocess.Popen(['opt', '-S', '-o', out] + opts, stdin=p1.stdout)
	p1.stdout.close()
	p2.communicate()
	return p1.returncode

def path_find(progname, dirs):
	for d in dirs:
		p = os.path.join(d, progname)
		if os.path.exists(p):
			return p
	return progname

def main():
	llvmbindir = subprocess.check_output(['llvm-config', '--bindir'], universal_newlines=True).strip()
	clangpath = path_find('clang', [llvmbindir, '/usr/bin', '/usr/local/bin'])
	clang = clangpath + ' -no-integrated-as'
	llvmcc = os.getenv('LLVMCC', clang).split(' ')
	argv = sys.argv[1:]
	exts = ['.c', '.cc', '.cpp', '.cxx', '.C']
	# Keep silence for preprocesssing and make depend.
	if any(a in argv for a in ['-E', '-M', '-MM']):
		return
	# Extrace input source files.
	srcs = [a for a in argv if os.path.splitext(a)[1] in exts]
	# Keep silence if only '-' is given; otherwise we need to duplicate
	# data from stdin for the next consumer (e.g., gcc).
	if not srcs:
		return
	# Remove source files froma args.
	argv = [x for x in argv if x not in srcs]
	for s in srcs:
		rc = cc(llvmcc, s, list(argv))
	sys.exit(rc)

if __name__ == '__main__':
	main()
